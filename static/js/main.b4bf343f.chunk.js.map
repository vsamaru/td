{"version":3,"sources":["Tdlib.js","assets/tg_logo.png","Authentication.js","RemoteFile.js","RoundChatPicture.js","ChatSelection.js","EmptyChat.js","Loading.js","ReactionButton.js","Slideshow.js","MainApp.js","App.js","reportWebVitals.js","index.js"],"names":["TelegramContext","createContext","TelegramProvider","props","useState","client","setClient","chatId","setChatId","chatIdRef","useRef","event","setEvent","history","setHistory","sendTextMessage","text","a","send","chat_id","reply_to_message_id","input_message_content","entities","getChats","offset_order","offset_chat_id","limit","chat_list","getChat","downloadFile","fileId","file_id","priority","synchronous","getChatHistory","useCallback","from_message_id","then","newHistory","Set","messages","sort","b","date","onUpdate","update","message","current","message_ids","forEach","messageId","filter","id","handleMessages","useEffect","console","log","tdlib","TdClient","useTestDC","readOnly","verbosity","jsVerbosity","fastUpdating","useDatabase","mode","parameters","use_test_dc","api_id","process","api_hash","system_language_code","navigator","language","device_model","application_version","use_secret_chats","use_message_database","use_file_database","files_directory","loadHistory","Provider","value","useTdlib","context","useContext","undefined","Error","Container","styled","div","display","placeItems","height","backgroundColor","Authentication","qr","type","window","location","reload","other_user_ids","qrCode","QRCodeStyling","width","data","authorization_state","link","image","tg_logo","dotsOptions","color","backgroundOptions","imageOptions","crossOrigin","margin","innerHTML","append","handleAuhentication","ref","RemoteFile","render","blob","setBlob","isSubscribed","file","URL","createObjectURL","getRemoteFile","RoundChatPicture","size","src","borderRadius","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","ListContainer","scrollDirection","List","ul","listStyle","padding","Chat","li","fontSize","background","ChatSelection","chats","setChats","chat_ids","map","chatInfo","title","chatPhotoId","photo","small","getChatList","chat","onClick","style","flexDirection","alignItems","marginLeft","Message","EmptyChat","setTitle","setFileId","big","getChatInfo","Overlay","position","top","right","zIndex","overflowX","boxShadow","Loading","ReactDOM","createPortal","document","getElementById","Button","button","border","font","ReactionButton","children","useSound","volume","playActive","playOn","onMouseDown","onMouseUp","sendReaction","overflow","cursor","Picture","Caption","left","Reactions","Slideshow","loading","setLoading","media","setMedia","caption","setCaption","mediaMessages","includes","content","isEmpty","last","photoSize","sizes","photoFileId","localPhotoFile","photoSrc","data-testid","video","videoId","localVideoFile","videoSrc","controls","autoPlay","getMediaMessage","MainApp","App","updates","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.b4bf343f.chunk.js","sourcesContent":["import {\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useContext,\n  createContext\n} from 'react'\nimport TdClient from 'tdweb'\n\nconst TelegramContext = createContext()\n\nfunction TelegramProvider (props) {\n  const [client, setClient] = useState()\n  const [chatId, setChatId] = useState()\n  // we need to keep a pointer to chatId since is used in the tdlib callback\n  const chatIdRef = useRef()\n  const [event, setEvent] = useState()\n  const [history, setHistory] = useState([])\n\n  const sendTextMessage = async (chatId, text) => {\n    return client.send({\n      '@type': 'sendMessage',\n      chat_id: chatId,\n      reply_to_message_id: 0,\n      input_message_content: {\n        '@type': 'inputMessageText',\n        text: {\n          '@type': 'formattedText',\n          text,\n          entities: []\n        }\n      }\n    })\n  }\n\n  const getChats = async (\n    offset_order = '9223372036854775807',\n    offset_chat_id = 0,\n    limit = 50\n  ) => {\n    return client.send({\n      '@type': 'getChats',\n      chat_list: { '@type': 'chatListMain' },\n      offset_order,\n      offset_chat_id,\n      limit\n    })\n  }\n\n  const getChat = async chatId => {\n    return client.send({\n      '@type': 'getChat',\n      chat_id: chatId\n    })\n  }\n\n  const downloadFile = async fileId => {\n    // downloading the file\n    await client.send({\n      '@type': 'downloadFile',\n      file_id: fileId,\n      priority: 1,\n      synchronous: true\n    })\n\n    // Read the data from local tdlib to blob\n    return client.send({\n      '@type': 'readFile',\n      file_id: fileId\n    })\n  }\n\n  const getChatHistory = useCallback(\n    (chatId, from_message_id = 0, limit = 100) => {\n      client &&\n        client\n          .send({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            limit,\n            from_message_id\n          })\n          .then(newHistory =>\n            setHistory(history =>\n              [...new Set([...newHistory.messages, ...history])].sort(\n                (a, b) => a.date - b.date\n              )\n            )\n          )\n    },\n    [client]\n  )\n\n  const handleMessages = update => {\n    // We can have a new message or one could be deleted\n    switch (update['@type']) {\n      case 'updateNewMessage':\n        if (update?.message?.chat_id === chatIdRef.current) {\n          setHistory(history => [...history, update?.message])\n        }\n        break\n      case 'updateDeleteMessages':\n        // delete the image from the cache\n        if (update.chat_id === chatIdRef.current) {\n          update.message_ids.forEach(async messageId => {\n            setHistory(history =>\n              history.filter(message => message.id !== messageId)\n            )\n          })\n        }\n        break\n      default:\n        break\n    }\n  }\n\n  const onUpdate = useCallback(update => {\n    // This is for debug, the amount of messages from the lib scares me...\n    // console.log('***', JSON.stringify(update))\n    // We care only of the auth states here\n    if (update['@type'] === 'updateAuthorizationState') {\n      setEvent(update)\n    }\n\n    if (\n      update['@type'] === 'updateNewMessage' ||\n      update['@type'] === 'updateDeleteMessages'\n    ) {\n      handleMessages(update)\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log('Initializing tdlib')\n    const tdlib = new TdClient({\n      useTestDC: false,\n      readOnly: false,\n      verbosity: 3,\n      jsVerbosity: 3,\n      fastUpdating: true,\n      useDatabase: false,\n      mode: 'wasm'\n    })\n\n    tdlib.onUpdate = onUpdate\n    setClient(tdlib)\n  }, [onUpdate])\n\n  useEffect(() => {\n    if (client) {\n      client.send({\n        '@type': 'setTdlibParameters',\n        parameters: {\n          '@type': 'tdParameters',\n          use_test_dc: false,\n          api_id: process.env.REACT_APP_APP_ID,\n          api_hash: process.env.REACT_APP_HASH_ID,\n          system_language_code: navigator.language || 'en',\n          device_model: 'Telegram Frame',\n          application_version: '0.1',\n          use_secret_chats: false,\n          use_message_database: false,\n          use_file_database: false,\n          files_directory: '/'\n        }\n      })\n    }\n  }, [client])\n\n  useEffect(() => {\n    async function loadHistory () {\n      await client.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: chatId,\n        limit: 1\n      })\n\n      // on the first call, tdlib could return just 1 message\n      getChatHistory(chatId)\n    }\n\n    if (client && chatId) {\n      chatIdRef.current = chatId\n      loadHistory()\n    }\n  }, [client, chatId, getChatHistory])\n\n  return (\n    <TelegramContext.Provider\n      value={{\n        client,\n        chatId,\n        setChatId,\n        event,\n        history,\n        getChat,\n        getChats,\n        getChatHistory,\n        sendTextMessage,\n        downloadFile\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction useTdlib () {\n  const context = useContext(TelegramContext)\n  if (context === undefined) {\n    throw new Error(`useTdlib must be used within a TelegramProvider`)\n  }\n  return context\n}\n\nexport { TelegramProvider, useTdlib }\n","export default __webpack_public_path__ + \"static/media/tg_logo.eea735da.png\";","import { useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useTdlib } from './Tdlib'\nimport QRCodeStyling from 'qr-code-styling'\nimport tg_logo from './assets/tg_logo.png'\n\nconst Container = styled.div({\n  display: 'grid',\n  placeItems: 'center',\n  height: 600,\n  backgroundColor: 'rgba(238, 243, 246, 0.8)'\n})\n\nexport default function Authentication ({ event }) {\n  const { client } = useTdlib()\n  const qr = useRef()\n\n  useEffect(() => {\n    async function handleAuhentication () {\n      const type = event['authorization_state']['@type']\n      switch (type) {\n        case 'authorizationStateClosed':\n          await client.send({ '@type': 'destroy' })\n          window.location.reload() // a kind of a 'hack' but it works...\n          break\n        case 'authorizationStateWaitEncryptionKey':\n          await client.send({\n            '@type': 'checkDatabaseEncryptionKey'\n          })\n          break\n        case 'authorizationStateWaitPhoneNumber':\n          await client.send({\n            '@type': 'requestQrCodeAuthentication',\n            other_user_ids: []\n          })\n          break\n        case 'authorizationStateWaitOtherDeviceConfirmation':\n          const qrCode = new QRCodeStyling({\n            width: 400,\n            height: 400,\n            data: event.authorization_state.link,\n            image: tg_logo,\n            dotsOptions: {\n              color: '#25abec',\n              type: 'square'\n            },\n            backgroundOptions: {\n              color: 'transparent'\n            },\n            imageOptions: {\n              crossOrigin: 'anonymous',\n              margin: 20\n            }\n          })\n\n          qr.current.innerHTML = ''\n          qrCode.append(qr.current)\n\n          break\n        default:\n          break\n      }\n    }\n\n    if (client && event?.authorization_state) {\n      handleAuhentication()\n    }\n  }, [client, event])\n\n  return (\n    <Container>\n      <h1>Login with your device</h1>\n      <div ref={qr}></div>\n    </Container>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { useTdlib } from './Tdlib'\n\nexport default function RemoteFile ({ fileId, render }) {\n  const { downloadFile } = useTdlib()\n  const [blob, setBlob] = useState()\n\n  useEffect(() => {\n    let isSubscribed = true\n    async function getRemoteFile () {\n      if (!fileId) return\n      const file = await downloadFile(fileId)\n      if (isSubscribed) {\n        setBlob(URL.createObjectURL(file.data))\n      }\n    }\n\n    getRemoteFile()\n    return () => (isSubscribed = false)\n  }, [fileId, downloadFile])\n\n  return render && render({ blob })\n}\n","import styled from 'styled-components/macro'\n\nconst RoundChatPicture = styled.div(({ size = 100, src }) => ({\n  height: size,\n  width: size,\n  borderRadius: '50%',\n  backgroundImage: `url(${src})`,\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover',\n  backgroundColor: 'rgba(238, 243, 246, 0.8)'\n}))\n\nexport { RoundChatPicture }\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components/macro'\nimport { useTdlib } from './Tdlib'\nimport RemoteFile from './RemoteFile'\nimport { RoundChatPicture } from './RoundChatPicture'\n\nconst ListContainer = styled.div({\n  scrollDirection: 'vertical'\n})\n\nconst List = styled.ul({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0\n})\n\nconst Chat = styled.li({\n  padding: 10,\n  fontSize: '2rem',\n  '&:nth-child(odd)': {\n    background: 'rgba(238, 243, 246, 0.8)'\n  }\n})\n\nexport default function ChatSelection () {\n  const { client, getChat, getChats, setChatId } = useTdlib()\n  const [chats, setChats] = useState([])\n\n  useEffect(() => {\n    async function getChatList () {\n      const response = await getChats()\n      response.chat_ids.map(async chatId => {\n        const chatInfo = await getChat(chatId)\n        setChats(chats => [\n          ...chats,\n          {\n            id: chatId,\n            title: chatInfo.title,\n            chatPhotoId: chatInfo?.photo?.small?.id\n          }\n        ])\n      })\n    }\n\n    getChatList()\n  }, [client, getChat, getChats])\n\n  return (\n    <ListContainer>\n      <h1>Select a chat to use as Frame:</h1>\n      <List>\n        {chats.map(chat => (\n          <Chat key={chat.id} onClick={event => setChatId(chat.id)}>\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center'\n              }}\n            >\n              <RemoteFile\n                fileId={chat.chatPhotoId}\n                render={props => (\n                  <RoundChatPicture size={100} src={props.blob} />\n                )}\n              />\n              <div style={{ marginLeft: 30 }}>{chat.title}</div>\n            </div>\n          </Chat>\n        ))}\n      </List>\n    </ListContainer>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components/macro'\nimport { useTdlib } from './Tdlib'\nimport RemoteFile from './RemoteFile'\nimport { RoundChatPicture } from './RoundChatPicture'\n\nconst Container = styled.div({\n  display: 'grid',\n  placeItems: 'center',\n  height: '100vh'\n})\n\nconst Message = styled.div({\n  fontSize: '2rem'\n})\n\nexport default function EmptyChat () {\n  const { client, chatId, getChat, getChatHistory } = useTdlib()\n  const [title, setTitle] = useState(null)\n  const [fileId, setFileId] = useState()\n\n  useEffect(() => {\n    if (chatId && getChatHistory) {\n      getChatHistory(chatId)\n    }\n  }, [chatId, getChatHistory])\n\n  useEffect(() => {\n    let isSubscribed = true\n\n    async function getChatInfo () {\n      const chat = await getChat(chatId)\n      const fileId = chat?.photo?.big?.id\n\n      if (isSubscribed) {\n        setTitle(chat.title)\n        setFileId(fileId)\n      }\n    }\n\n    getChatInfo()\n    return () => (isSubscribed = false)\n  }, [client, chatId, getChat])\n\n  return (\n    <Container>\n      <RemoteFile\n        fileId={fileId}\n        render={props => <RoundChatPicture size={400} src={props.blob} />}\n      />\n      <Message>Send a picture to '{title}' to view it here</Message>\n    </Container>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport styled from 'styled-components/macro'\n\nconst Overlay = styled.div({\n  display: 'grid',\n  placeItems: 'center',\n  height: '100%',\n  width: '100%',\n  position: 'fixed',\n  top: 0,\n  right: 0,\n  zIndex: 999,\n  backgroundColor: 'rgba(238, 243, 246, 0.8)',\n  overflowX: 'hidden'\n})\n\nconst Container = styled.div({\n  padding: 20,\n  display: 'grid',\n  placeItems: 'center',\n  backgroundColor: 'white',\n  boxShadow: '0 0 16px 0 rgba(51,51,51,0.16)',\n  height: 150,\n  width: 150,\n  borderRadius: '50%'\n})\n\nexport default function Loading ({ message = 'Loading...' }) {\n  return ReactDOM.createPortal(\n    <Overlay>\n      <Container>\n        <div>{message}</div>\n      </Container>\n    </Overlay>,\n    document.getElementById('modal-root')\n  )\n}\n","import styled from 'styled-components'\nimport useSound from 'use-sound'\nimport { useTdlib } from './Tdlib'\n\nconst Button = styled.button({\n  padding: 10,\n  border: 'none',\n  font: 'inherit',\n  color: 'inherit',\n  backgroundColor: 'light-grey',\n  borderRadius: '50%',\n  height: 50,\n  width: 50,\n  fontSize: '1.5rem',\n  margin: 5\n})\n\nexport default function ReactionButton ({ client, text, children }) {\n  const { chatId, sendTextMessage } = useTdlib()\n  const [playActive] = useSound('/pop-down.mp3', { volume: 0.25 })\n  const [playOn] = useSound('/pop-up-on.mp3', { volume: 0.25 })\n\n  function sendReaction (text) {\n    sendTextMessage(chatId, text)\n  }\n\n  function onClick (event) {\n    playOn()\n    sendReaction(text)\n  }\n\n  return (\n    <Button onMouseDown={playActive} onMouseUp={onClick}>\n      {children}\n    </Button>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components/macro'\nimport { useTdlib } from './Tdlib'\nimport { last, isEmpty } from 'lodash'\nimport Loading from './Loading'\nimport ReactionButton from './ReactionButton'\n\nconst Container = styled.div({\n  overflow: 'hidden',\n  height: 600,\n  width: 1024,\n  cursor: 'none'\n})\n\nconst Picture = styled.div(({ blob }) => ({\n  // width: '100%',\n  height: 600,\n  backgroundImage: `url(${blob})`,\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n}))\n\nconst Caption = styled.div({\n  position: 'relative',\n  top: -60,\n  left: '2%',\n  color: 'white',\n  fontSize: '2rem'\n})\n\nconst Reactions = styled.div({\n  position: 'relative',\n  top: '-15%',\n  left: '85%',\n  display: 'flex',\n  flexDirection: 'row'\n})\n\nexport default function Slideshow () {\n  const { client, chatId, history, getChatHistory, downloadFile } = useTdlib()\n  const [loading, setLoading] = useState(true)\n  const [media, setMedia] = useState()\n  const [caption, setCaption] = useState('')\n\n  useEffect(() => {\n    async function getMediaMessage () {\n      setLoading(true)\n      // Getting last message with a Photo/Video\n      const mediaMessages = history.filter(message =>\n        ['messagePhoto', 'messageVideo'].includes(message?.content?.['@type'])\n      )\n\n      if (isEmpty(mediaMessages)) {\n        // we don't have any media in the chat...\n        setMedia(<Loading message='No media in this chat...' />)\n      }\n\n      const message = last(mediaMessages)\n      switch (message?.content?.['@type']) {\n        case 'messagePhoto':\n          const photo = message.content.photo\n          const photoSize = last(photo.sizes)\n          const photoFileId = photoSize.photo.id\n          const localPhotoFile = await downloadFile(photoFileId)\n          const photoSrc = URL.createObjectURL(localPhotoFile.data)\n          setMedia(<Picture data-testid={photoFileId} blob={photoSrc} />)\n          setCaption(message.content?.text)\n          break\n        case 'messageVideo':\n          const video = message.content.video\n          const videoId = video.video.id\n          const localVideoFile = await downloadFile(videoId)\n          const videoSrc = URL.createObjectURL(localVideoFile.data)\n          setMedia(\n            <video data-testid={videoId} src={videoSrc} controls autoPlay />\n          )\n          setCaption(message.content?.text)\n          break\n        default:\n          break\n      }\n      setLoading(false)\n    }\n\n    getMediaMessage()\n  }, [client, history, chatId, getChatHistory, downloadFile])\n\n  return (\n    <Container>\n      {loading && <Loading />}\n      {media}\n      <Caption>{caption}</Caption>\n      <Reactions>\n        <ReactionButton client={client} text='♥️'>\n          ♥️\n        </ReactionButton>\n        <ReactionButton client={client} text='🥰'>\n          🥰\n        </ReactionButton>\n      </Reactions>\n    </Container>\n  )\n}\n","import { isEmpty } from 'lodash'\nimport { useTdlib } from './Tdlib'\nimport ChatSelection from './ChatSelection'\nimport EmptyChat from './EmptyChat'\nimport Slideshow from './Slideshow'\n\nexport default function MainApp () {\n  const { chatId, history } = useTdlib()\n\n  // We haven't selected a chat yet...\n  if (!chatId) {\n    return <ChatSelection />\n  }\n\n  // There are no messages to show\n  if (isEmpty(history)) {\n    return <EmptyChat />\n  }\n\n  return <Slideshow />\n}\n","import React from 'react'\nimport { useTdlib } from './Tdlib'\nimport Authentication from './Authentication'\nimport MainApp from './MainApp'\n\nimport '@fontsource/roboto'\nimport './App.css'\nimport Loading from './Loading'\n\nfunction App () {\n  const { client, event, updates } = useTdlib()\n\n  if (event && event['authorization_state']) {\n    const type = event['authorization_state']['@type']\n    switch (type) {\n      case 'authorizationStateWaitEncryptionKey':\n      case 'authorizationStateWaitOtherDeviceConfirmation':\n      case 'authorizationStateWaitPhoneNumber':\n      case 'updateAuthorizationState':\n      case 'authorizationStateClosed':\n        return <Authentication event={event} client={client} />\n      case 'authorizationStateReady':\n        return <MainApp updates={updates} client={client} />\n      default:\n        return null\n    }\n  } else {\n    return <Loading message='Loading the app...' />\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { TelegramProvider } from './Tdlib'\n\nReactDOM.render(\n  <StrictMode>\n    <TelegramProvider>\n      <App />\n    </TelegramProvider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}